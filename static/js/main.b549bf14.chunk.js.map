{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useFetch","url","options","useState","status","setStatus","data","setData","useEffect","fetch","then","res","ok","json","Error","teamsWithPoints","reduce","acc","matchup","Lineups","homeTeam","awayTeam","homeTeamName","Team","NickName","awayTeamName","points","push","Points","city","name","teamsWithDerivedData","Object","entries","map","team","rest","total","next","best","max","worst","min","average","length","toFixed","sort","a","getTeamData","catch","err","Teams","renderDate","useRef","Date","toISOString","current","teams","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b549bf14.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport \"./App.css\";\n\ntype DataRes = Array<{\n\tLineups: Array<{\n\t\tTeam: string;\n\t\tNickName: string;\n\t\tPoints: number;\n\t}>;\n}>;\n\ntype TeamWithPoints = {\n\tcity: string;\n\tname: string;\n\tpoints: number[];\n};\n\nfunction getTeamData(data: DataRes) {\n\tconst teamsWithPoints = data.reduce((acc, matchup) => {\n\t\tconst [homeTeam, awayTeam] = matchup.Lineups;\n\t\tconst homeTeamName = `${homeTeam.Team} ${homeTeam.NickName}`;\n\t\tconst awayTeamName = `${awayTeam.Team} ${awayTeam.NickName}`;\n\n\t\tif (!acc[homeTeamName]) {\n\t\t\tacc[homeTeamName] = {\n\t\t\t\tcity: homeTeam.Team,\n\t\t\t\tname: homeTeam.NickName,\n\t\t\t\tpoints: [homeTeam.Points],\n\t\t\t};\n\t\t} else {\n\t\t\tacc[homeTeamName].points.push(homeTeam.Points);\n\t\t}\n\n\t\tif (!acc[awayTeamName]) {\n\t\t\tacc[awayTeamName] = {\n\t\t\t\tcity: awayTeam.Team,\n\t\t\t\tname: awayTeam.NickName,\n\t\t\t\tpoints: [awayTeam.Points],\n\t\t\t};\n\t\t} else {\n\t\t\tacc[awayTeamName].points.push(awayTeam.Points);\n\t\t}\n\n\t\treturn acc;\n\t}, {} as { [teamName: string]: TeamWithPoints });\n\n\tconst teamsWithDerivedData: [string, TeamData][] = Object.entries(\n\t\tteamsWithPoints\n\t).map(([team, { points, ...rest }]) => {\n\t\tconst total = points.reduce((acc, next) => acc + next, 0);\n\t\treturn [\n\t\t\tteam,\n\t\t\t{\n\t\t\t\t...rest,\n\t\t\t\tbest: points.reduce((max, next) => (next > max ? next : max)),\n\t\t\t\tworst: points.reduce((min, next) => (next < min ? next : min)),\n\t\t\t\ttotal,\n\t\t\t\taverage: (total / points.length).toFixed(1),\n\t\t\t},\n\t\t];\n\t});\n\n\tteamsWithDerivedData.sort(([, a], [, b]) => b.total - a.total);\n\n\treturn teamsWithDerivedData;\n}\n\ntype Status = \"idle\" | \"loading\" | \"success\" | \"error\";\n\nfunction useFetch(url: string, options?: RequestInit) {\n\tconst [status, setStatus] = useState<Status>(\"idle\");\n\tconst [data, setData] = useState<Array<[string, TeamData]>>();\n\n\tuseEffect(() => {\n\t\tsetStatus(\"loading\");\n\t\tfetch(url, options)\n\t\t\t.then((res) => {\n\t\t\t\tif (res.ok) {\n\t\t\t\t\treturn res.json();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Response not OK\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\tsetData(getTeamData(data));\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tsetStatus(\"error\");\n\t\t\t});\n\t}, [options, url]);\n\n\treturn {\n\t\tstatus,\n\t\tdata,\n\t};\n}\n\ntype TeamData = {\n\tcity: string;\n\tname: string;\n\ttotal: number;\n\taverage: string;\n\tbest: number;\n\tworst: number;\n};\n\nfunction Teams() {\n\t// otherwise you'll just keep on fetching\n\tconst renderDate = useRef(new Date().toISOString());\n\tconst { data: teams = [], status } = useFetch(\n\t\t`https://api.cover5.com/v1/fixtures?pagesize=1000&endDate=${renderDate.current}&startDate=2021-09-09T06:00:00Z`\n\t);\n\n\tswitch (status) {\n\t\tcase \"idle\":\n\t\t\treturn null;\n\t\tcase \"loading\":\n\t\t\treturn <p>Loading teams data...</p>;\n\t\tcase \"error\":\n\t\t\treturn <p>Error loading teams!</p>;\n\t\tcase \"success\":\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<caption>All Teams</caption>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Team</th>\n\t\t\t\t\t\t\t\t<th>Best</th>\n\t\t\t\t\t\t\t\t<th>Worst</th>\n\t\t\t\t\t\t\t\t<th>Average</th>\n\t\t\t\t\t\t\t\t<th>Total</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{teams.map(\n\t\t\t\t\t\t\t\t([key, { city, name, total, best, worst, average }]) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<tr key={key}>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t{city} <b>{name}</b>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{best}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{worst}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{average}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{total}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</>\n\t\t\t);\n\t}\n}\n\nexport default function App() {\n\treturn (\n\t\t<main className=\"container\">\n\t\t\t<h1>Cover5 Dashboard</h1>\n\t\t\t<Teams />\n\t\t</main>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}